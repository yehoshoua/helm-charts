apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "grafana-agent.fullname" . }}-statefulset
  labels:
    {{- include "grafana-agent.labels-statefulset" . | nindent 4 }}
  {{- with .Values.controller_statefulset.extraAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.controller_statefulset.autoscaling.enabled }}
  replicas: {{ .Values.controller_statefulset.replicas }}
  {{- end }}
  {{- if .Values.controller_statefulset.parallelRollout }}
  podManagementPolicy: Parallel
  {{- end }}
  {{- if ge (int .Capabilities.KubeVersion.Minor) 22 }}
  minReadySeconds: 10
  {{- end }}
  serviceName: {{ include "grafana-agent.fullname" . }}
  selector:
    matchLabels:
      {{- include "grafana-agent.selectorLabels-statefulset" . | nindent 6 }}
  template:
    {{- include "grafana-agent.pod-statefulset-template" . | nindent 4 }}
  {{- with .Values.controller_statefulset.updateStrategy }}
  updateStrategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.controller_statefulset.volumeClaimTemplates }}
  volumeClaimTemplates:
    {{- range . }}
    - {{ toYaml . | nindent 6 }}
    {{- end }}
  {{- end }}
  {{- if and (semverCompare ">= 1.23-0" .Capabilities.KubeVersion.Version) (.Values.controller_statefulset.enableStatefulSetAutoDeletePVC) }}
  {{- /*
    Data on the read nodes is easy to replace, so we want to always delete PVCs to make
    operation easier, and will rely on re-fetching data when needed.
  */}}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Delete
    whenScaled: Delete
  {{- end }}
